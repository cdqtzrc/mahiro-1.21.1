plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url 'https://maven.aliyun.com/nexus/content/groups/public'
	}
	maven {
		url 'https://repository.hanbings.io/proxy'
	}
	// 在此处添加存储库以检索构件。
	// 你应该只在依赖其他 Mod 时使用它，因为
	// Loom 添加了必要的 maven 存储库，以自动从 Minecraft 和库下载。
	// 访问https://docs.gradle.org/current/userguide/declaring_repositories.html
	// 了解有关存储库的更多信息。
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	//要更改版本，请参阅 gradle.properties 文件
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API 的 API 中。这在技术上是可选的，但您可能仍然需要它。
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	//如果存在， Loom 会自动将 sourcesJar 附加到 RemapSourcesJar 任务和 “build” 任务
	// 如果删除此行，则不会生成源。
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

//配置 Maven 发布
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// 有关如何设置发布的信息，请参阅 https://docs.gradle.org/current/userguide/publishing_maven.html。
	repositories {
		// 在此处添加要发布到的存储库。
		// 注意： 此区块与顶层区块的功能不同。
		// 此处的存储库将用于发布您的构件，而不是
		// 检索依赖项。
	}
}